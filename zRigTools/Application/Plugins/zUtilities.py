# ZooUtilities
# Initial code generated by XSI SDK Wizard
# Executed Wed Aug 30 17:19:43 PDT 2006 by andy
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
# 
# Tip: To get help on a callback, highlight the callback name
# (for example, "Init", "Define", or "Execute") and press F1.
import win32com.client
from win32com.client import constants
from win32com.client import constants as c

null = None
false = 0
true = 1

xsi = Application

def XSILoadPlugin( in_reg ):
	in_reg.Author = "andy"
	in_reg.Name = "ZooUtilities"
	in_reg.Email = ""
	in_reg.URL = ""
	in_reg.Major = 1
	in_reg.Minor = 0

	
	#in_reg.RegisterCommand("PyProp","PyProp")
	
	in_reg.RegisterCommand("PyFix","PyFix")
	
	
	in_reg.RegisterCommand("zgNewCol","zgNewCol")
	
	in_reg.RegisterCommand("zgGetUser","zgGetUser")
	
	in_reg.RegisterCommand("zgPrintMatrix","zgPrintMatrix")
	#RegistrationInsertionPoint - do not remove this line

	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."))
	return true

def PyProp_Init( ctxt ):
	oCmd = ctxt.Source
	oCmd.Description = "Fixes dynamic dispatch problem with python and xsi properties"
	oCmd.SetFlag(constants.siNoLogging,true)
	oCmd.ReturnValue = False

	oArgs = oCmd.Arguments
	oArgs.AddWithHandler("item","SingleObj")
	oArgs.Add("property",constants.siArgumentInput, '', constants.siString )
	return true

def PyProp_Execute( item, property ):

#	xsi.logmessage( 'Item :%s' % item )
#	xsi.logmessage( 'Property: %s' % property )
	prop = win32com.client.dynamic.Dispatch( item.Properties( property ) )
	if prop:
		return prop
	else:
		return None
		
def PyFix_Init( ctxt ):
	oCmd = ctxt.Source
	oCmd.Description = ""
	oCmd.SetFlag(constants.siNoLogging,true)
	oCmd.ReturnValue = True

	oArgs = oCmd.Arguments
	oArgs.AddWithHandler("item","SingleObj")
	return true

def PyFix_Execute( item ):

	return win32com.client.dynamic.Dispatch( item )




def zgNewCol_Init( ctxt ):
	oCmd = ctxt.Source
	oCmd.Description = ""
	oCmd.SetFlag(constants.siSupportsKeyAssignment,false)
	oCmd.SetFlag(constants.siNoLogging,true)
	oCmd.ReturnValue = true

	return true

def zgNewCol_Execute(  ):

	return win32com.client.dynamic.Dispatch( 'XSI.Collection' )

def zgGetUser_Init( ctxt ):
	oCmd = ctxt.Source
	oCmd.Description = ""
	oCmd.SetFlag(constants.siSupportsKeyAssignment,false)
	oCmd.SetFlag(constants.siNoLogging,true)
	oCmd.ReturnValue = true

	return true

def zgGetUser_Execute(  ):

	import os
	if os.name == "nt":
		import win32api
		return win32api.GetUserName()
	elif os.name == 'posix':
		return os.environ[ 'USER' ]
		
	return
def zgPrintMatrix_Init( ctxt ):
	oCmd = ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	oArgs = oCmd.Arguments
	oArgs.Add("matrix",constants.siArgumentInput)
	return true

def zgPrintMatrix_Execute( matrix ):

	m = matrix

	xsi.logmessage('+%(a)s+%(a)s+%(a)s+%(a)s+' % { 'a': str('-' * 11) } )
	xsi.logmessage( '|%- 10.4g |%- 10.5g |%- 10.5g |%- 10.5g|' % (m.Value(0,0),m.Value(0,1),m.Value(0,2),m.Value(0,3) ) )
	xsi.logmessage('+%(a)s+%(a)s+%(a)s+%(a)s+' % { 'a': str('.' * 11) } )
	xsi.logmessage( '|%- 10.4g |%- 10.5g |%- 10.5g |%- 10.5g|' % (m.Value(1,0),m.Value(1,1),m.Value(1,2),m.Value(1,3) ) )
	xsi.logmessage('+%(a)s+%(a)s+%(a)s+%(a)s+' % { 'a': str('.' * 11) } )
	xsi.logmessage( '|%- 10.4g |%- 10.5g |%- 10.5g |%- 10.5g|' % (m.Value(2,0),m.Value(2,1),m.Value(2,2),m.Value(2,3) ) )
	xsi.logmessage('+%(a)s+%(a)s+%(a)s+%(a)s+' % { 'a': str('.' * 11) } )
	xsi.logmessage( '|%- 10.4g |%- 10.5g |%- 10.5g |%- 10.5g|' % (m.Value(3,0),m.Value(3,1),m.Value(3,2),m.Value(3,3) ) )
	xsi.logmessage('+%(a)s+%(a)s+%(a)s+%(a)s+' % { 'a': str('-' * 11) } )
	
	return true

